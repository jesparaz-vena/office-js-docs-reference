### YamlMime:TSPackageuid: word!name: wordtype: packagesummary: ''enums:  - 'word!Word.Alignment:enum'  - 'word!Word.BreakType:enum'  - 'word!Word.ContentControlAppearance:enum'  - 'word!Word.ContentControlType:enum'  - 'word!Word.ErrorCodes:enum'  - 'word!Word.HeaderFooterType:enum'  - 'word!Word.InsertLocation:enum'  - 'word!Word.SelectionMode:enum'  - 'word!Word.UnderlineType:enum'classes:  - 'word!Word.Body:class'  - 'word!Word.ContentControl:class'  - 'word!Word.ContentControlCollection:class'  - 'word!Word.Document:class'  - 'word!Word.Font:class'  - 'word!Word.InlinePicture:class'  - 'word!Word.InlinePictureCollection:class'  - 'word!Word.Paragraph:class'  - 'word!Word.ParagraphCollection:class'  - 'word!Word.Range:class'  - 'word!Word.RangeCollection:class'  - 'word!Word.RequestContext:class'  - 'word!Word.SearchOptions:class'  - 'word!Word.Section:class'  - 'word!Word.SectionCollection:class'interfaces:functions:  - name: 'Word.run(objects, batch)'    uid: 'word!Word.run:function(1)'    package: word!    summary: >-      Executes a batch script that performs actions on the Word object model, using the RequestContext of previously      created API objects.    remarks: ''    isPreview: false    isDeprecated: false    syntax:      content: >-        export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Word.RequestContext) =>        Promise<T>): Promise<T>;      parameters:        - id: objects          description: >-            An array of previously created API objects. The array will be validated to make sure that all of the objects            share the same context. The batch will use this shared RequestContext, which means that any changes applied            to these objects will be picked up by "context.sync()".          type: '<xref uid="office!OfficeExtension.ClientObject:class" />[]'        - id: batch          description: >-            A function that takes in a RequestContext and returns a promise (typically, just the result of            "context.sync()"). The context parameter facilitates requests to the Word application. Since the Office            add-in and the Word application run in two different processes, the RequestContext is required to get access            to the Word object model from the add-in.          type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'      return:        type: Promise&lt;T&gt;        description: ''  - name: 'Word.run(object, batch)'    uid: 'word!Word.run:function(2)'    package: word!    summary: >-      Executes a batch script that performs actions on the Word object model, using the RequestContext of a previously      created API object. When the promise is resolved, any tracked objects that were automatically allocated during      execution will be released.    remarks: ''    isPreview: false    isDeprecated: false    syntax:      content: >-        export function run<T>(object: OfficeExtension.ClientObject, batch: (context: Word.RequestContext) =>        Promise<T>): Promise<T>;      parameters:        - id: object          description: >-            A previously created API object. The batch will use the same RequestContext as the passed-in object, which            means that any changes applied to the object will be picked up by "context.sync()".          type: '<xref uid="office!OfficeExtension.ClientObject:class" />'        - id: batch          description: >-            A function that takes in a RequestContext and returns a promise (typically, just the result of            "context.sync()"). The context parameter facilitates requests to the Word application. Since the Office            add-in and the Word application run in two different processes, the RequestContext is required to get access            to the Word object model from the add-in.          type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'      return:        type: Promise&lt;T&gt;        description: ''  - name: Word.run(batch)    uid: 'word!Word.run:function(3)'    package: word!    summary: >-      Executes a batch script that performs actions on the Word object model, using a new RequestContext. When the      promise is resolved, any tracked objects that were automatically allocated during execution will be released.    remarks: ''    isPreview: false    isDeprecated: false    syntax:      content: 'export function run<T>(batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'      parameters:        - id: batch          description: >-            A function that takes in a RequestContext and returns a promise (typically, just the result of            "context.sync()"). The context parameter facilitates requests to the Word application. Since the Office            add-in and the Word application run in two different processes, the RequestContext is required to get access            to the Word object model from the add-in.          type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'      return:        type: Promise&lt;T&gt;        description: ''